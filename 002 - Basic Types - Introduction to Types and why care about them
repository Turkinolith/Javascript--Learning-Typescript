*********************
**** Basic Types ****
*********************
Type = Easy way to refer to the different properties + functions that a value has.

Value - A value in JS and TS is anything that we can assign to a variable. [strings, numbers, boolean, undefined, null, object, function, classes, arrays, etc]
	all of those have types.

"easy way to refer to the different properties and functions" - What does this mean?
	If I was to ask what is this: "red" a quick answer is "it is a string" a more detailed answer would be "it is a value that has all of the properties and methods we assume that a string has"
	And a string has properties such as "charAt(), concat(), includes(), indexOf(), match(), etc."
	So when we refer to the type of a value its a shortcut that refers to the different methods and properties that type has assigned to it.
	
	In some cases this is really obvious, like a string. in other cases I'll learn that types exist that are tied to values that I wouldn't expect.
		When I defined the interface of "Todo" that created a new type inside of the app and its name was "Todo"
		So, there are 2 ways to refer to the response.data in the previous tutorial app.
			#1 - said its an object that has an id property, title property, and completed property. Repeating this would be inconvenient, so we formed a shortcut instead.
			#2 - said its a Todo. And now I know what that is, its an object with an id, title, and completed property.
	

** Why care about types at all?

	Types:		Values that have this type:
	String		"hi there", "", 'today is Monday'
	number		0.00025, -20, 400000
	boolean		true, false
	Date		new Date()
	Todo   		{ id: 1, completed: true, title: "Trash" }   *from lesson*
	
	Every value in typescript has a type, so if we make a new date object, the resulting object from that would have type of Date.
	Similarly, the defined "Todo" from earlier, if I had an object that had the properties ID as a number, completed as a bool, and title as a string, would be a "Todo" object. But only if that interface was defined.
	
** 2 types of... types.
	Primitive Types:
	number, bool, undefined, null, string, [void, symbol] (symbol and void will be discussed more later.)
	
	Object Types:
	functions, arrays, objects, classes
	
	Why are there 2 categories? Essentially because you can write code that will essentially trick typescript into believing one value is a different type in a good way. This is only possible with object types, not primitives.
	

** Back to Why do we care about types?
	Types are used by the Typescript Compiler to analyze code for errors.

	Types allow other engineers to understand what values are flowing around the codebase.
	
